<class name = "stream">
    
    <state name = "open">
        
        <event name = "RAW">
            
            <action name="detect message type" />
            
        </event>
        
        <event name = "control" next = "ready" />
        
        <event name = "data" next = "close">
            
            <action name="terminate" />
            
        </event>
        
    </state>
    
    <state name = "ready">
        
        <event name = "RAW">
            
            <action name = "detect message type" />
            
        </event>
        
        <event name = "control" next = "close" />
        
        <event name = "data">
            
            <action name="convert bytes" />
            
        </event>
        
        <event name = "PACKET">
            
            <action name="convert packet" />
            
        </event>
        
    </state>
    
    <state name = "close" />
    
    <method name = "sendPacket">
        
        <param name = "client" type = "Frame" />
        <param name = "packet" type = "BinaryPacket" />
        
    </method>
    
    <action name = "detect message type"><!--
        
        if (event.data.size() == 0) {
        
            throw ControlEvent(event);
        
        }
        throw DataEvent(event);
        
    --></action>
    
    <action name = "terminate"><!--
        
        StreamProtocol::ControlEvent disconnect;
        disconnect.address = event.address;
        disconnect.send(_frontend);
        
    --></action>
    
    <action name = "convert bytes"><!--
        
        char *data = event.data.data<char>();
            char *end = data + event.data.size();
            
            while (data < end) {
                
                _reader << *data++;
                
                if (_reader.valid()) {
                
                    auto packet = _reader.createPacket();
                
                    SessionManagerProtocol::PacketEvent(packet).send(_backend);
                
                    _backend.send(packet);
                
                }
                
            }
                
    --></action>
    
    <action name = "convert packet"><!--
        
        auto packet = event.packet;
        
        ProtocolWriter writer(packet);
        
        while ( ! writer.empty()) {
        
            char buffer[1024];
            char *ptr = buffer;
            char *end = buffer + sizeof(buffer);
            
            while (ptr < end && ! writer.empty()) {
            
                *ptr++ = writer.get();

            }
            
            StreamProtocol::DataEvent data;
            data.address = event.clientId;
            data.data = Frame(buffer, ptr - buffer);
            data.send(_frontend);
        
        }

    --></action>
        
    <var name = "_reader" type = "ProtocolReader" />

</class>
